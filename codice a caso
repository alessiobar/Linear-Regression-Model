library(data.table)
library(mltools)
library(dummies)
library(ggplot2)
library(GGally)
library(grDevices)
library(glmnet)
library(caret)

train = read.csv("train.csv")
test = read.csv("test.csv")
train_num=train[, (sapply(train, class) == "integer")]
data = rbind(train[, -c(length(train))], test)

#Outlier singola colonna
boxplot(train_num$LotFrontage)
a=boxplot.stats(train_num$LotFrontage)
b=as.factor(a$out)
c=levels(b)
tempp=train_num
for(x in c){
  print(x)
  tempp= tempp[!tempp$LotFrontage== x,]
}
summary(tempp[1:3])

#Outlier tutte le colonne
no_out=train_num
i=1
for(y in colnames(train_num[1:10])){ 
  if(class(train_num[[i]][1])=='integer'){
    print(y)
    a=boxplot.stats(train_num[[y]])$out
    c=levels(as.factor(a))
    print(c)
    for(x in c){
      no_out= no_out[!no_out[[y]]== x,]
    }
  }
  i=i+1
}

#Low Correlation w.r.t. SalePrice
ggcorr(train_num[1:37], low = 'darkgreen', mid ='#C3DE02', high='black', label = TRUE, label_size = 3, label_round = 2, label_alpha = FALSE, label_color ='white')
a=ggcorr(train_num[1:37], low = 'darkgreen', mid ='#C3DE02', high='black', label = TRUE, label_size = 3, label_round = 2, label_alpha = FALSE, label_color ='white')$data
temp = subset(a, x=="SalePrice")
head(temp)
confal = subset(temp, abs(coefficient) >= 0.1)
head(confal)
View(confal)
colonne_rimosse=length(temp$y)-length(confal$y)

#Near Zero Variance fix
nzv_cols = nearZeroVar(data)
names(data[nzv_cols])
if(length(nzv_cols) > 0){
  data = data[, -nzv_cols]
}

#Lasso
dati= fill.na.num(train[,(sapply(train, class)=="integer")]) #rough na removal
allenamento=data.matrix(dati[,-37])
y=dati[,37]
train_rows=sample(1:1100, 0.70*1100)
allenamento.train= allenamento[train_rows,]
allenamento.test = allenamento[-train_rows,]
y.train= y[train_rows]
y.test = y[-train_rows]
alpha0.fit = cv.glmnet(allenamento.train, y.train, type.measure = "mse", alpha=0, family="gaussian")
alpha0.predicted = predict(alpha0.fit, s=alpha0.fit[["lambda.1se"]], newx=allenamento.test)
mean((y.test-alpha0.predicted)^2)

lasso.mod=glmnet(allenamento.train, y.train, alpha =1)
cv.out=cv.glmnet(allenamento.train, y.train, alpha=1)
bestlam=cv.out$lambda.min
lasso.pred=predict( lasso.mod, s=bestlam , newx=allenamento.test)
mean((lasso.pred-y.test)^2)
mse(lasso.pred,y.test)
plot(lasso.pred,y.test)
